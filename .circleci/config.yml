# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  slack: circleci/slack@3.2.0 #https://github.com/CircleCI-Public/slack-orb

executors:
  cactus-web:
    working_directory: ~/project
    docker:
      - image: circleci/node:10.18.1-browsers
aliases:
  ## Module Names
  - &root-module ""
  - &web-module "web"
  - &functions-module "functions"
  - &shared-module "shared"
  - &scripts-module "scripts"
  - &admin-module "shared-admin"

  ## Function Modules
  - &func-pubsub1 "functions:pubsub1"
  - &func-pubsub2 "functions:pubsub2"
  - &func-pubsub3 "functions:pubsub3"
  - &func-auth "functions:authTriggers"
  - &func-db1 "functions:db1"
  - &func-db2 "functions:db2"
  - &func-db3 "functions:db3"
  - &func-apis1 "functions:test,functions:mailchimp,functions:notificationPreferences"
  - &func-apis2 "functions:slack,functions:flamelink,functions:inbound,functions:apple"
  - &func-apis3 "functions:checkout,functions:signup,functions:social,functions:user"



  - &api-1-stage "Funcs: Api 1 Stage"
  - &api-2-stage "Funcs: Api 2 Stage"
  - &api-3-stage "Funcs: Api 3 Stage"
  - &auth-1-stage "Funcs: Auth 1 Stage"
  - &db-1-stage "Funcs: Firestore Triggers 1 Stage"
  - &db-2-stage "Funcs: Firestore Triggers 2 Stage"
  - &db-3-stage "Funcs: Firestore Triggers 3 Stage"
  - &pubsub-1-stage "Funcs: PubSub 1 Stage"
  - &pubsub-2-stage "Funcs: PubSub 2 Stage"
  - &pubsub-3-stage "Funcs: PubSub 3 Stage"

  - &api-1-prod "Funcs: Api 1 Prod"
  - &api-2-prod "Funcs: Api 2 Prod"
  - &api-3-prod "Funcs: Api 3 Prod"
  - &auth-1-prod "Funcs: Auth 1 Prod"
  - &db-1-prod "Funcs: Firestore Triggers 1 Prod"
  - &db-2-prod "Funcs: Firestore Triggers 2 Prod"
  - &db-3-prod "Funcs: Firestore Triggers 3 Prod"
  - &pubsub-1-prod "Funcs: PubSub 1 Prod"
  - &pubsub-2-prod "Funcs: PubSub 2 Prod"
  - &pubsub-3-prod "Funcs: PubSub 3 Prod"

  ## Slack Configs
  - &webhook-engineering-ci
    webhook: "https://hooks.slack.com/services/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"

  - &notify-job-started-slack
    <<: *webhook-engineering-ci
    color: '#42e2f4'
    message: "Job \\`$CIRCLE_JOB\\` starting on branch *$CIRCLE_BRANCH* <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID|Workflow>"


commands:
  get-repo-link:
    steps:
      - run:
          name: Get Repo Link
          command: |
            SLACK_GIT_LINK="<https://github.com/Kinecho/cactus/compare/${CIRCLE_BRANCH}?expand=1|Open Pull Request>"
            if [[ ! -z $CIRCLE_PULL_REQUEST ]] ; then
              SLACK_GIT_LINK="<$CIRCLE_PULL_REQUEST|View Pull Request>"
            fi
            echo "Slack GIT Link is \"${SLACK_GIT_LINK}\""
            export SLACK_GIT_LINK
            echo $SLACK_GIT_LINK >> .slack_git_url.txt
            echo 'export SLACK_GIT_LINK="$SLACK_GIT_LINK"' >> $BASH_ENV

  firebase-deploy-only:
    description: "Deploy some modules to firebase"
    parameters: # see https://circleci.com/docs/2.0/reusing-config/#parameter-types
      project:
        type: enum
        description: The project alias to deploy. Either "stage" or "prod"
        default: "stage"
        enum: ["stage", "prod"]
      modules:
        type: string
        default: "error"
        description: The firebase modules to deploy. Example "hosting" or "functions" or "functions:test,functions:slack"
      group_name:
        type: string
        description: The name of the step being run
        default: << parameters.modules >>
    steps:
      - run:
          no_output_timeout: 10m
          name: Deploy << parameters.group_name >> to Firebase
          command: |
            git config --global user.name CircleCI
            echo "Setting default project to be << parameters.project >>"
            npx firebase use << parameters.project >>
            echo "Starting firebase deploy for << parameters.modules >> on project << parameters.project >>"
            npx firebase deploy --only << parameters.modules >> -P << parameters.project >> -f
  restore-module:
    parameters:
      module:
        type: enum
        default: *root-module
        enum: [*root-module, *web-module, *functions-module, *shared-module, *scripts-module, *admin-module]
        description: "The module name, e.g. web, functions, etc"
    steps:
      - when:
          condition: << parameters.module >>
          steps:
            - restore_cache:
                name: "Restore << parameters.module >> Cache"
                keys:
                  - v10-<< parameters.module >>-dependency-{{ .Branch }}-{{ checksum "<< parameters.module >>/package.json" }}
                  - v10-<< parameters.module >>-dependency-{{ .Branch }}-
                  - v10-<< parameters.module >>-dependency-
      - unless:
          condition: << parameters.module >>
          steps:
            - restore_cache:
                name: "Save Root Dependencies to Cache"
                keys:
                  - v10-root-dependency-{{ .Branch }}-{{ checksum "package.json" }}
                  - v10-root-dependency-{{ .Branch }}-
                  - v10-root-dependency-
  restore-all:
    steps:
      - restore-module:
          module: *root-module
      - restore-module:
          module: *web-module
      - restore-module:
          module: *shared-module
      - restore-module:
          module: *functions-module
      - restore-module:
          module: *scripts-module
      - restore-module:
          module: *admin-module

  install-module:
    parameters:
      module:
        type: enum
        enum: [*root-module, *web-module, *functions-module, *shared-module, *scripts-module, *admin-module]
        default: *root-module
        description: "The module name, e.g. web, functions, etc"
    steps:
      - restore-module:
          module: << parameters.module >>
      - when:
          condition: << parameters.module >>
          steps:
            - run: npm --prefix << parameters.module >> ci
            - save_cache:
                name: "Save << parameters.module >> Dependencies to Cache"
                paths:
                  - << parameters.module >>/node_modules
                key: v10-<< parameters.module >>-dependency-{{ .Branch }}-{{ checksum "<< parameters.module >>/package.json" }}
      - unless:
          condition: << parameters.module >>
          steps:
            - run: npm ci
            - save_cache:
                name: "Save Root Dependencies to Cache"
                paths:
                  - node_modules
                key: v10-root-dependency-{{ .Branch }}-{{ checksum "package.json" }}
  notify-on-failure:
    parameters:
      workflow_name:
        type: string
        default: "<not set>"
        description: "The message to send to slack"
      env:
        type: string
        default: ""
        description: "The firebase environment"
    steps:
      - get-repo-link
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true
          include_project_field: false
          include_job_number_field: false
          failure_message: ":boom: << parameters.env >> *$CIRCLE_JOB* job failed in a <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| CI workflow >\nBranch \\`<https://github.com/Kinecho/cactus-ios/compare/${CIRCLE_BRANCH}|${CIRCLE_BRANCH}>\\`"

jobs:
  get-changes:
    executor: cactus-web
    resource_class: small
    steps:
      - checkout
      - run: mkdir -p workspace
      - run: . git-folder.sh
      - run: ls -a | grep modules_to_deploy.txt
      - run:
          name: "Determine Modules to Deploy"
          command: |
            echo "Printing output & copying file"
            cat modules_to_deploy.txt
            cp modules_to_deploy.txt workspace
      - persist_to_workspace:
          root: "workspace"
          paths:
            - modules_to_deploy.txt
  deploy-stage:
    executor: cactus-web
    resource_class: large
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace
      - run:
          name: "Deploy to Modules Firebase"
          no_output_timeout: 20m
          command: |
            echo "The current build output is"
            echo "Deploy Modules: $(cat /tmp/workspace/modules_to_deploy.txt)"
            MODULES=$(cat /tmp/workspace/modules_to_deploy.txt || "NONE")

            if [[ `cat /tmp/workspace/modules_to_deploy.txt` == "NONE" ]]; then
              echo "Nothing to Deploy";
              exit 0
            else
              echo "Starting firebase deploy for --only ${MODULES}"
              firebase deploy --only $MODULES -P stage
            fi
      - notify-on-failure:
          env: "stage"

  install-all:
    executor: cactus-web
    resource_class: medium
    steps:
      - checkout
      - install-module:
          module: *root-module
      - install-module:
          module: *functions-module
      - install-module:
          module: *web-module
      - install-module:
          module: *shared-module
      - install-module:
          module: *scripts-module
      - install-module:
          module: *admin-module
      - notify-on-failure
  test-web:
    executor: cactus-web
    resource_class: small
    steps:
      - checkout
      - restore-module:
          module: web
      - restore-module:
          module: shared
      - run:
          name: "TSLint"
          command: npm --prefix web run lint:ci
      - run:
          name: "Compile TypeScript"
          command: npm --prefix web run tsc
      - run:
          name: "Run Unit Tests"
          command: npm --prefix web run test:ci
      - store_test_results:
          path: web/reports/tests
      - store_test_results:
          path: web/reports/coverage
      - store_artifacts:
          path: web/reports
      - notify-on-failure
  test-functions:
    executor: cactus-web
    resource_class: small
    steps:
      - checkout
      - restore-module:
          module: *functions-module
      - restore-module:
          module: *shared-module
      - restore-module:
          module: *admin-module
      - run:
          name: "TSLint"
          command: npm --prefix functions run lint:ci
      - run:
          name: "Build Sources"
          command: npm --prefix functions run build
      - run:
          name: "Run Unit Tests"
          command: npm --prefix functions run test:ci
      - store_test_results:
          path: functions/reports/tests
      - store_test_results:
          path: functions/reports/coverage
      - store_artifacts:
          path: functions/reports
      - notify-on-failure

  test-shared:
    executor: cactus-web
    resource_class: small
    steps:
      - checkout
      - restore-module:
          module: shared
      - run:
          name: "TSLint"
          command: npm --prefix shared run lint:ci
      - run:
          name: "Run Unit Tests"
          command: npm --prefix shared run test:ci
      - store_test_results:
          path: shared/reports/tests
      - store_test_results:
          path: shared/reports/coverage
      - store_artifacts:
          path: shared/reports
      - notify-on-failure
  test-scripts:
    executor: cactus-web
    resource_class: small
    steps:
      - checkout
      - restore-module:
          module: shared
      - restore-module:
          module: scripts
      - restore-module:
          module: *admin-module
      - run:
          name: "TSLint"
          command: npm --prefix scripts run lint:ci
      - run:
          name: "Run Unit Tests"
          command: npm --prefix scripts run test:ci
      - store_test_results:
          path: scripts/reports/tests
      - store_artifacts:
          path: scripts/reports
      - notify-on-failure
  ready-for-deploy:
    executor: cactus-web
    resource_class: small
    steps:
      - run: echo "Ready for deployments"
      - slack/notify:
          <<: *webhook-engineering-ci
          color: 'good'
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: "A Stage Build is <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID|ready for promotion>"
  prod-deploy-started:
    executor: cactus-web
    resource_class: small
    steps:
      - run: echo "Notify prod deploy started"
      - slack/notify:
          <<: *webhook-engineering-ci
          color: 'good'
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: "$CIRCLE_USERNAME has promoted a Stage Build. <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID|View Workflow>"
  branch-deploy-started:
    executor: cactus-web
    resource_class: small
    steps:
      - run: echo "Notify Feature Branch deploy started"
      - slack/notify:
          <<: *webhook-engineering-ci
          color: 'good'
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: "$CIRCLE_USERNAME has started deploying \\`${CIRCLE_BRANCH}\\` to stage. <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID|View Workflow>"

  branch-deploy-finished:
    executor: cactus-web
    resource_class: small
    steps:
      - run: echo "Notify Feature Branch deploy finished"
      - slack/notify:
          <<: *webhook-engineering-ci
          color: 'good'
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: "A branch has has been deployed to stage.\n<https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID|View Workflow>"

  firebase-deploy-functions:
    description: "Deploy all functions (in groups) to firebase"
    parameters: # see https://circleci.com/docs/2.0/reusing-config/#parameter-types
      project:
        type: enum
        description: The project alias to deploy. Either "stage" or "prod"
        default: "stage"
        enum: ["stage", "prod"]
    executor: cactus-web
    resource_class: large
    steps:
      - checkout
      - restore-all
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: "firestore:indexes"
          group_name: "Firestore Indexes"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-apis1
          group_name: "Api Group 1"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-apis2
          group_name: "Api Group 2"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-apis3
          group_name: "Api Group 3"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-db1
          group_name: "Firestore DB 1 Triggers"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-db2
          group_name: "Firestore DB 2 Triggers"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-db3
          group_name: "Firestore DB 3 Triggers"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-auth
          group_name: "Auth Triggers"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-pubsub1
          group_name: "PubSub 1 triggers"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-pubsub2
          group_name: "PubSub 2 triggers"
      - firebase-deploy-only:
          project: << parameters.project >>
          modules: *func-pubsub3
          group_name: "PubSub 3 triggers"
      - notify-on-failure
  firebase-deploy-some:
    description: "Deploy selected modules to the selected project"
    parameters: # see https://circleci.com/docs/2.0/reusing-config/#parameter-types
      project:
        type: enum
        description: The project alias to deploy. Either "stage" or "prod"
        default: "stage"
        enum: ["stage", "prod"]
      modules:
        type: string
        default: "error"
        description: The firebase modules to deploy. Example "hosting" or "functions" or "functions:test,functions:slack"
    executor: cactus-web
    resource_class: large
    steps:
      - checkout
      - restore-all
      - run:
          no_output_timeout: 20m
          name: Deploy to Firebase
          command: |
            git config --global user.name CircleCI
            echo "Setting default project to be << parameters.project >>"
            npx firebase use << parameters.project >>
            echo "Starting firebase deploy for << parameters.modules >> on project << parameters.project >>"
            npx firebase deploy --only << parameters.modules >> -P << parameters.project >> -f
      - notify-on-failure:
              env: << parameters.project >>

  firebase-deploy-all:
    description: "Deploy selected modules to the selected project"
    parameters: # see https://circleci.com/docs/2.0/reusing-config/#parameter-types
      project:
        type: enum
        description: The project alias to deploy. Either "stage" or "prod"
        default: "stage"
        enum: ["stage", "prod"]
      modules:
        type: string
        default: "error"
        description: The firebase modules to deploy. Example "hosting" or "functions" or "functions:test,functions:slack"
    executor: cactus-web
    resource_class: large
    steps:
      - checkout
      - restore-all
      - run:
          no_output_timeout: 20m
          name: Deploy to Firebase
          command: |
            git config --global user.name CircleCI
            echo "Setting default project to be << parameters.project >>"
            npx firebase use << parameters.project >>
            echo "Starting firebase deploy for << parameters.modules >> on project << parameters.project >>"
            npx firebase deploy -P << parameters.project >> -f
      - notify-on-failure:
          env: << parameters.project >>
  notify-workflow-finished:
    description: "Notify slack that a workflow has finished and provide a link"
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    resource_class: small
    steps:
      - slack/notify:
          <<: *webhook-engineering-ci
          color: "good"
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: ":white_check_mark: Finished Workflow <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > \nBranch \\`${CIRCLE_BRANCH}\\`"
  notify-workflow-started:
    description: "Notify slack that a workflow has started and provide a link"
    resource_class: small
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    steps:
      - slack/notify:
          <<: *webhook-engineering-ci
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          color: "#d8d8d8"
          message: "Starting workflow <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > \nBranch \\`${CIRCLE_BRANCH}\\`"
  notify-branch-workflow-started:
    description: "Notify slack that a branch workflow has started and provide a link"
    resource_class: small
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    steps:
      - get-repo-link
      - slack/notify:
          <<: *webhook-engineering-ci
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          color: "#d8d8d8"
          ts: "$(date +%s)"
          message: ":building_construction: Starting workflow <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > \nBranch \\`${CIRCLE_BRANCH}\\`\n$(cat .slack_git_url.txt)"
  notify-branch-workflow-finished:
    description: "Notify slack that a branch workflow has finished and provide a link"
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    resource_class: small
    steps:
      - get-repo-link
      - slack/notify:
          <<: *webhook-engineering-ci
          color: "good"
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: ":white_check_mark: \\`${CIRCLE_BRANCH}\\` <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > completed successfully.\n$(cat .slack_git_url.txt)"
  notify-master-tests-passed:
    description: "Notify slack that a tests on master passed"
    parameters:
      workflow_name:
        type: string
        default: "Release Pipeline"
        description: "The message to send to slack"
    executor: cactus-web
    resource_class: small
    steps:
      - get-repo-link
      - slack/notify:
          <<: *webhook-engineering-ci
          color: "good"
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: ":white_check_mark: \\`master\\` <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > All tests passed successfully."
  notify-master-functions-deployed:
    description: "Notify slack that a functions on master deployed successfully"
    parameters:
      workflow_name:
        type: string
        default: "Release Pipeline"
        description: "The message to send to slack"
    executor: cactus-web
    resource_class: small
    steps:
      - get-repo-link
      - slack/notify:
          <<: *webhook-engineering-ci
          color: "good"
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          ts: "$(date +%s)"
          message: ":white_check_mark: \\`master\\` <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > All functions were deployed successfully."

workflows:
  version: 2.1
  branch_build_and_test:
    jobs:
      - notify-branch-workflow-started:
          name: &workflow_name Feature Branch Build & Test
          workflow_name: *workflow_name
          filters:
            branches:
              ignore: master
      - install-all:
          name: &install_all_name "Install Dependencies"
          requires:
            - *workflow_name
          filters:
            branches:
              ignore: master
      - test-shared:
          name: &test_shared_name "Shared Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - test-scripts:
          name: &test_scripts_name "Scripts Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - test-web:
          name: &test_web_name "Web Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - test-functions:
          name: &test_functions_name "API Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - notify-branch-workflow-finished:
          name: &all_tests_finished "Notify Tests Passed"
          workflow_name: "Feature Branch Tests"
          requires:
            - *install_all_name
            - *test_functions_name
            - *test_scripts_name
            - *test_shared_name
            - *test_web_name
          filters:
            branches:
              ignore: master
      - branch_deploy_fe_approval:
          type: approval
          name: &stage_fe_approval_name "Approve Hosting Only To Stage"
          requires:
            - *all_tests_finished
      - firebase-deploy-some:
          name: &branch_deploy_only_hosting_name "Deploy Hosting Only to Stage"
          project: "stage"
          modules: "hosting,firestore:rules,firestore:indexes"
          requires:
            - *stage_fe_approval_name
      - branch-deploy-finished:
          name: "Notify Hosting Finished"
          requires:
            - *branch_deploy_only_hosting_name
            - *stage_fe_approval_name
      - branch_deploy_all_approval:
          type: approval
          name: &stage_all_approval_name "Approve All To Stage"
          requires:
            - *all_tests_finished
      - branch-deploy-started:
          name: &notify-all-started "Notify Branch All Deploy Started"
          requires:
            - *stage_all_approval_name
      - firebase-deploy-some:
          name: &api-1 "Funcs - Api 1 (Stage)"
          project: "stage"
          modules: *func-apis1
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &api-2 "Funcs - Api 2 (Stage)"
          project: "stage"
          modules: *func-apis2
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &api-3 "Funcs - Api 3 (Stage)"
          project: "stage"
          modules: *func-apis3
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &auth-1 "Funcs - Auth 3 (Stage)"
          project: "stage"
          modules: *func-auth
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &db-1 "Funcs - DB 1 (Stage)"
          project: "stage"
          modules: *func-db1
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &db-2 "Funcs - DB 2 (Stage)"
          project: "stage"
          modules: *func-db2
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &db-3 "Funcs - DB 3 (Stage)"
          project: "stage"
          modules: *func-db3
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &pubsub-1 "Funcs - PubSub 1 (Stage)"
          project: "stage"
          modules: *func-pubsub1
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &pubsub-2 "Funcs - PubSub 2 (Stage)"
          project: "stage"
          modules: *func-pubsub2
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &pubsub-3 "Funcs - PubSub 3 (Stage)"
          project: "stage"
          modules: *func-pubsub3
          requires:
            - *notify-all-started
      - firebase-deploy-some:
          name: &branch_deploy_hosting_name "Deploy Hosting to Stage"
          project: "stage"
          modules: "hosting,firestore:rules,firestore:indexes"
          requires:
            - *api-1
            - *api-2
            - *api-3
            - *auth-1
            - *db-1
            - *db-2
            - *db-3
            - *pubsub-1
            - *pubsub-2
            - *pubsub-3
      - branch-deploy-finished:
          name: "Notify Finished"
          requires:
            - *branch_deploy_hosting_name

  cactus_release_pipeline:
    jobs:
      - notify-workflow-started:
          name: &workflow_name Notify Cactus Release Pipeline Started
          workflow_name: *workflow_name
          filters:
            branches:
              only:
                - master
      - install-all:
          name: &install_all_name "Install Dependencies"
          filters:
            branches:
              only:
                - master
      - test-shared:
          name: &test_shared_name "Shared Tests"
          requires:
            - *install_all_name
      - test-scripts:
          name: &test_scripts_name "Scripts Tests"
          requires:
            - *install_all_name
      - test-web:
          name: &test_web_name "Web Tests"
          requires:
            - *install_all_name
      - test-functions:
          name: &test_functions_name "API Tests"
          requires:
            - *install_all_name
      #      RELEASE DEPLOY FUNCTIONS TO STAGE START
      - notify-master-tests-passed:
          name: &unit_tests_passed_notification "Notify Unit tests passed"
          requires:
            - *install_all_name
            - *test_functions_name
            - *test_scripts_name
            - *test_shared_name
            - *test_web_name
      - firebase-deploy-some:
          name: *api-1-stage
          project: "stage"
          modules: *func-apis1
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *api-2-stage
          project: "stage"
          modules: *func-apis2
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *api-3-stage
          project: "stage"
          modules: *func-apis3
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *auth-1-stage
          project: "stage"
          modules: *func-auth
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *db-1-stage
          project: "stage"
          modules: *func-db1
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *db-2-stage
          project: "stage"
          modules: *func-db2
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *db-3-stage
          project: "stage"
          modules: *func-db3
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *pubsub-1-stage
          project: "stage"
          modules: *func-pubsub1
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *pubsub-2-stage
          project: "stage"
          modules: *func-pubsub2
          requires:
            - *unit_tests_passed_notification
      - firebase-deploy-some:
          name: *pubsub-3-stage
          project: "stage"
          modules: *func-pubsub3
          requires:
            - *unit_tests_passed_notification
      #      Deploy hosting once all functions are deployed
      #       Notify functions deployed, and use as a group for future steps
      - notify-master-functions-deployed:
          name: &functions-deployed-notification-stage "Notify Functions Deployed - Stage"
          requires:
            - *api-1-stage
            - *api-2-stage
            - *api-3-stage
            - *auth-1-stage
            - *db-1-stage
            - *db-2-stage
            - *db-3-stage
            - *pubsub-1-stage
            - *pubsub-2-stage
            - *pubsub-3-stage
      #     Deploy the frontend, requires notification to be sent as a grouping function
      - firebase-deploy-some:
          name: &stage_deploy_hosting_name "Deploy Hosting to Stage"
          project: "stage"
          modules: "hosting,firestore:rules,firestore:indexes"
          requires:
            - *functions-deployed-notification-stage

      - ready-for-deploy:
          name: "Notify Promotion Ready"
          requires:
            - *stage_deploy_hosting_name
      - prod_deploy_approval:
          type: approval
          name: &prod_approval_name "Deploy To Prod Approval"
          requires:
            - *stage_deploy_hosting_name
#            - *functions-deployed-notification-stage
#            - *install_all_name
#            - *test_web_name
#            - *test_shared_name
#            - *test_functions_name
#            - *test_scripts_name
      - prod-deploy-started:
          name: &notify_promoted "Notify Promotion"
          requires:
            - *prod_approval_name
      #      DEPLOY FUNCTIONS TO STAGE START
      - firebase-deploy-some:
          name: *api-1-prod
          project: "prod"
          modules: *func-apis1
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *api-2-prod
          project: "prod"
          modules: *func-apis2
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *api-3-prod
          project: "prod"
          modules: *func-apis3
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *auth-1-prod
          project: "prod"
          modules: *func-auth
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *db-1-prod
          project: "prod"
          modules: *func-db1
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *db-2-prod
          project: "prod"
          modules: *func-db2
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *db-3-prod
          project: "prod"
          modules: *func-db3
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *pubsub-1-prod
          project: "prod"
          modules: *func-pubsub1
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *pubsub-2-prod
          project: "prod"
          modules: *func-pubsub2
          requires:
            - *notify_promoted
      - firebase-deploy-some:
          name: *pubsub-3-prod
          project: "prod"
          modules: *func-pubsub3
          requires:
            - *notify_promoted
      #      Deploy hosting once all functions are deployed
      #       Notify functions deployed, and use as a group for future steps
      - notify-master-functions-deployed:
          name: &functions-deployed-notification-prod "Notify Functions Deployed - Prod"
          requires:
            - *api-1-prod
            - *api-2-prod
            - *api-3-prod
            - *auth-1-prod
            - *db-1-prod
            - *db-2-prod
            - *db-3-prod
            - *pubsub-1-prod
            - *pubsub-2-prod
            - *pubsub-3-prod

      - firebase-deploy-some:
          name: &release_deploy_hosting_name "Deploy Hosting to Prod"
          project: "prod"
          modules: "hosting,firestore:rules,firestore:indexes"
          requires:
            - *functions-deployed-notification-prod
      - notify-workflow-finished:
          name: "Release Finished Notification"
          workflow_name: "Release Pipeline - Prod"
          requires:
            - *release_deploy_hosting_name
