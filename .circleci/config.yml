# Javascript Node CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
orbs:
  slack: circleci/slack@3.2.0 #https://github.com/CircleCI-Public/slack-orb

executors:
  cactus-web:
    working_directory: ~/project
    docker:
      - image: circleci/node:8.15.0-browsers
aliases:
  ## Module Names
  - &root-module ""
  - &web-module "web"
  - &functions-module "functions"
  - &shared-module "shared"
  - &scripts-module "scripts"

  ## Slack Configs
  - &webhook-engineering-ci
    webhook: "https://hooks.slack.com/services/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"

  - &notify-job-started-slack
    <<: *webhook-engineering-ci
    color: '#42e2f4'
    message: "Job \\`$CIRCLE_JOB\\` starting on branch *$CIRCLE_BRANCH* <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID|Workflow>"


commands:
  restore-module:
    parameters:
      module:
        type: enum
        default: *root-module
        enum: [*root-module, *web-module, *functions-module, *shared-module, *scripts-module]
        description: "The module name, e.g. web, functions, etc"
    steps:
      - when:
          condition: << parameters.module >>
          steps:
            - restore_cache:
                name: "Restore << parameters.module >> Cache"
                keys:
                  - v3-<< parameters.module >>-dependency-{{ .Branch }}-{{ checksum "<< parameters.module >>/package.json" }}
                  - v3-<< parameters.module >>-dependency-{{ .Branch }}-
                  - v3-<< parameters.module >>-dependency-
      - unless:
          condition: << parameters.module >>
          steps:
            - restore_cache:
                name: "Save Root Dependencies to Cache"
                keys:
                  - v3-root-dependency-{{ .Branch }}-{{ checksum "package.json" }}
                  - v3-root-dependency-{{ .Branch }}-
                  - v3-root-dependency-
  restore-all:
    steps:
      - restore-module:
          module: *root-module
      - restore-module:
          module: *web-module
      - restore-module:
          module: *shared-module
      - restore-module:
          module: *functions-module
      - restore-module:
          module: *scripts-module

  install-module:
    parameters:
      module:
        type: enum
        enum: [*root-module, *web-module, *functions-module, *shared-module, *scripts-module]
        default: *root-module
        description: "The module name, e.g. web, functions, etc"
    steps:
      - restore-module:
          module: << parameters.module >>
      - when:
          condition: << parameters.module >>
          steps:
            - run: npm --prefix << parameters.module >> install
            - save_cache:
                name: "Save << parameters.module >> Dependencies to Cache"
                paths:
                  - << parameters.module >>/node_modules
                key: v3-<< parameters.module >>-dependency-{{ .Branch }}-{{ checksum "<< parameters.module >>/package.json" }}
      - unless:
          condition: << parameters.module >>
          steps:
            - run: npm install
            - save_cache:
                name: "Save Root Dependencies to Cache"
                paths:
                  - node_modules
                key: v3-root-dependency-{{ .Branch }}-{{ checksum "package.json" }}

jobs:
  get-changes:
    executor: cactus-web
    steps:
      - checkout
      - run: mkdir -p workspace
      - run: . git-folder.sh
      - run: ls -a | grep modules_to_deploy.txt
      - run:
          name: "Determine Modules to Deploy"
          command: |
            echo "Printing output & copying file"
            cat modules_to_deploy.txt
            cp modules_to_deploy.txt workspace
      - persist_to_workspace:
          root: "workspace"
          paths:
            - modules_to_deploy.txt
  deploy-stage:
    executor: cactus-web
    steps:
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace
      - run:
          name: "Deploy to Modules Firebase"
          command: |
            echo "The current build output is"
            echo "Deploy Modules: $(cat /tmp/workspace/modules_to_deploy.txt)"
            MODULES=$(cat /tmp/workspace/modules_to_deploy.txt || "NONE")

            if [[ `cat /tmp/workspace/modules_to_deploy.txt` == "NONE" ]]; then
              echo "Nothing to Deploy";
              exit 0
            else
              echo "Starting firebase deploy for --only ${MODULES}"
              firebase deploy --only $MODULES -P stage
            fi
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true

  install-all:
    executor: cactus-web
    steps:
      - checkout
      - install-module:
          module: *root-module
      - install-module:
          module: *functions-module
      - install-module:
          module: *web-module
      - install-module:
          module: *shared-module
      - install-module:
          module: *scripts-module
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true
  test-web:
    executor: cactus-web
    steps:
      - checkout
      - restore-module:
          module: web
      - restore-module:
          module: shared
      - run:
          name: "TSLint"
          command: npm --prefix web run lint:ci
      - run:
          name: "Compile TypeScript"
          command: npm --prefix web run tsc
      - run:
          name: "Run Unit Tests"
          command: npm --prefix web run test:ci
      - store_test_results:
          path: web/reports/tests
      - store_test_results:
          path: web/reports/coverage
      - store_artifacts:
          path: web/reports
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true
  test-functions:
    executor: cactus-web
    steps:
      - checkout
      - restore-module:
          module: functions
      - restore-module:
          module: shared
      - run:
          name: "TSLint"
          command: npm --prefix functions run lint:ci
      - run:
          name: "Build Sources"
          command: npm --prefix functions run build
      - run:
          name: "Run Unit Tests"
          command: npm --prefix functions run test:ci
      - store_test_results:
          path: functions/reports/tests
      - store_test_results:
          path: functions/reports/coverage
      - store_artifacts:
          path: functions/reports
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true

  test-shared:
    executor: cactus-web
    steps:
      - checkout
      - restore-module:
          module: shared
      - run:
          name: "TSLint"
          command: npm --prefix shared run lint:ci
      - run:
          name: "Run Unit Tests"
          command: npm --prefix shared run test:ci
      - store_test_results:
          path: shared/reports/tests
      - store_test_results:
          path: shared/reports/coverage
      - store_artifacts:
          path: shared/reports
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true
  test-scripts:
    executor: cactus-web
    steps:
      - checkout
      - restore-module:
          module: shared
      - restore-module:
          module: scripts
      - run:
          name: "TSLint"
          command: npm --prefix scripts run lint:ci
      - run:
          name: "Run Unit Tests"
          command: npm --prefix scripts run test:ci
      - store_test_results:
          path: scripts/reports/tests
      - store_artifacts:
          path: scripts/reports
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true
  ready-for-deploy:
    executor: cactus-web
    steps:
      - run: echo "Ready for deployments"
      - slack/notify:
          <<: *webhook-engineering-ci
          color: 'good'
          include_job_number_field: false
          include_visit_job_action: false
          message: "A Stage Build is <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID|ready for promotion>"

  firebase-deploy:
    description: "Deploy selected modules to the selected project"
    parameters: # see https://circleci.com/docs/2.0/reusing-config/#parameter-types
      project:
        type: enum
        description: The project alias to deploy. Either "stage" or "prod"
        default: "stage"
        enum: ["stage", "prod"]
      modules:
        type: string
        default: "error"
        description: The firebase modules to deploy. Example "hosting" or "functions" or "functions:test,functions:slack"
    executor: cactus-web
    resource_class: large
    steps:
      - checkout
      - restore-all
      - run:
          name: Deploy to Firebase
          command: |
            git config --global user.name CircleCI
            echo "Setting default project to be << parameters.project >>"
            npx firebase use << parameters.project >>
            echo "Starting firebase deploy for << parameters.modules >> on project << parameters.project >>"
            npx firebase deploy --only << parameters.modules >> -P << parameters.project >>
      - slack/status:
          <<: *webhook-engineering-ci
          fail_only: true
  notify-workflow-finished:
    description: "Notify slack that a workflow has finished and provide a link"
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    steps:
      - slack/notify:
          <<: *webhook-engineering-ci
          color: "good"
          include_job_number_field: false
          include_visit_job_action: false
          message: ":white_check_mark: Finished Workflow <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > \nBranch \\`${CIRCLE_BRANCH}\\`"
  notify-workflow-started:
    description: "Notify slack that a workflow has started and provide a link"
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    steps:
      - slack/notify:
          <<: *webhook-engineering-ci
          include_job_number_field: false
          include_visit_job_action: false
          color: "#d8d8d8"
          message: "Starting workflow <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > \nBranch \\`${CIRCLE_BRANCH}\\`"
  notify-branch-workflow-started:
    description: "Notify slack that a branch workflow has started and provide a link"
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    steps:
      - run:
          name: Set Current Date
          command: DATENOW=`date +%s`
      - slack/notify:
          <<: *webhook-engineering-ci
          include_job_number_field: false
          include_visit_job_action: false
          include_project_field: false
          color: "#d8d8d8"
          ts: date +%s
          message: "Starting workflow <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > \nBranch \\`${CIRCLE_BRANCH}\\`\n<https://github.com/Kinecho/cactus/compare/${CIRCLE_BRANCH}?expand=1|Open Pull Request>"
  notify-branch-workflow-finished:
    description: "Notify slack that a branch workflow has finished and provide a link"
    parameters:
      workflow_name:
        type: string
        default: "DEFAULT"
        description: "The message to send to slack"
    executor: cactus-web
    steps:
      - slack/notify:
          <<: *webhook-engineering-ci
          color: "good"
          include_job_number_field: false
          include_visit_job_action: false
          message: ":white_check_mark: Finished Workflow <https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID| << parameters.workflow_name >> > \nBranch \\`${CIRCLE_BRANCH}\\` \n<https://github.com/Kinecho/cactus/compare/${CIRCLE_BRANCH}?expand=1|Open Pull Request>"


workflows:
  version: 2.1
  branch_build_and_test:
    jobs:
      - notify-branch-workflow-started:
          name: &workflow_name Feature Branch Build & Test
          workflow_name: *workflow_name
          filters:
            branches:
              ignore: master
      - install-all:
          name: &install_all_name "Install Dependencies"
          filters:
            branches:
              ignore: master
      - test-shared:
          name: &test_shared_name "Shared Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - test-scripts:
          name: &test_scripts_name "Scripts Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - test-web:
          name: &test_web_name "Web Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - test-functions:
          name: &test_functions_name "API Tests"
          filters:
            branches:
              ignore: master
          requires:
            - *install_all_name
      - notify-branch-workflow-finished:
          name: Notify Workflow Complete
          workflow_name: *workflow_name
          filters:
            branches:
              ignore: master

  cactus_release_pipeline:
    jobs:
      - notify-workflow-started:
          name: &workflow_name Cactus Release Pipeline
          workflow_name: *workflow_name
          filters:
            branches:
              only: master
      - install-all:
          name: &install_all_name "Install Dependencies"
          filters:
            branches:
              only: master
      - test-shared:
          name: &test_shared_name "Shared Tests"
          filters:
            branches:
              only: master
          requires:
            - *install_all_name
      - test-scripts:
          name: &test_scripts_name "Scripts Tests"
          requires:
            - *install_all_name
      - test-web:
          name: &test_web_name "Web Tests"
          requires:
            - *install_all_name
      - test-functions:
          name: &test_functions_name "API Tests"
          requires:
            - *install_all_name
      - firebase-deploy:
          name: &deploy_stage_name "Stage: Deploy All"
          modules: "functions,hosting"
          project: "stage"
          requires:
            - *install_all_name
            - *test_web_name
            - *test_shared_name
            - *test_functions_name
            - *test_scripts_name
      - ready-for-deploy:
          name: "Notify Promotion Ready"
          requires:
            - *deploy_stage_name
      - prod_deploy_approval:
          type: approval
          name: &prod_approval_name "Deploy To Prod Approval"
          requires:
            - *deploy_stage_name
      - firebase-deploy:
          name: "Prod: Deploy All"
          project: "prod"
          modules: "functions,hosting"
          requires:
            - *prod_approval_name
