import {isNull} from "@shared/util/ObjectUtil";
import {ISODate} from "@shared/mailchimp/models/MailchimpTypes";

export interface VerifyReceiptParams {
    /**
     * Base 64 encoded receipt string
     */
    receiptData: string
}

export interface AppleFulfillmentResult {
    success: boolean,
    message?: string,
}

export interface VerifyReceiptResult {
    success: boolean,
    isValid?: boolean,
    fulfillmentResult?: AppleFulfillmentResult,
    message?: string
    error?: string,
    appleReceiptData?: AppleReceiptResponseRawBody,
}

export function isVerifyReceiptParams(input: any): input is VerifyReceiptParams {
    return !isNull(input) && !!(input as VerifyReceiptParams).receiptData;
}

export function isAppleReceiptResponseRawBody(input: any): input is AppleReceiptResponseRawBody {
    return !isNull(input) && (input as AppleReceiptResponseRawBody).status !== undefined
}

type BooleanString = "true" | "false"

/**
 * See [Apple Docs](https://developer.apple.com/documentation/appstorereceipts/responsebody/latest_receipt_info)
 */
export interface AppleTransactionInfo {
    /**
     * The time Apple customer support canceled a transaction, in a date-time format similar to the ISO 8601. This field is only present for refunded transactions.
     */
    cancellation_date?: ISODate;
    cancellation_date_ms?: string;
    cancellation_date_pst?: string;

    /**
     * The reason for a refunded transaction. When a customer cancels a transaction, the App Store gives them a refund and provides a value for this key. A value of “1” indicates that the customer canceled their transaction due to an actual or perceived issue within your app. A value of “0” indicates that the transaction was canceled for another reason; for example, if the customer made the purchase accidentally.
     Possible values: 1, 0
     */
    cancellation_reason?: "0" | "1";
    expires_date?: ISODate;
    expires_date_ms?: string;
    expires_date_pst?: string;

    /**
     * An indicator of whether an auto-renewable subscription is in the introductory price period. See [is_in_intro_offer_period](https://developer.apple.com/documentation/appstorereceipts/is_in_intro_offer_period) for more information.
     */
    is_in_intro_offer_period?: BooleanString
    is_trial_period?: BooleanString
    is_upgraded?: BooleanString
    original_purchase_date?: ISODate
    original_purchase_date_ms?: string;
    original_purchase_date_pst?: string;
    original_transaction_id: string;
    product_id: string;
    promotional_offer_id?: string;
    purchase_date?: ISODate;
    purchase_date_ms?: string;
    purchase_date_pst?: string;
    quantity: string;
    subscription_group_identifier?: string;
    transaction_id?: string;
    web_order_line_item_id?: string;
    [key: string]: any
}

/**
 * The decoded version of the encoded receipt data sent with the request to the App Store.
 */
export interface AppleReceipt {
    adam_id?: number;
    /**
     * Generated by App Store Connect and used by the App Store to uniquely identify the app purchased. Apps are assigned this identifier only in production. Treat this value as a 64-bit long integer.
     */
    app_item_id?: number;
    application_version?: number;
    bundle_id?: string;
    download_id?: number;
    expiration_date?: string;
    expiration_date_ms?: string;
    expiration_date_pst?: string;
    in_app?: AppleTransactionInfo[];
    original_application_version?: string;
    original_purchase_date?: string;
    original_purchase_date_ms?: string;
    original_purchase_date_pst?: string;
    preorder_date?: string;
    preorder_date_ms?: string;
    preorder_date_pst?: string;
    receipt_creation_date?: string;
    receipt_creation_date_ms?: string;
    receipt_creation_date_pst?: string;
    receipt_type?: string;
    request_date?: string;
    request_date_ms?: string;
    request_date_pst?: string;
    version_external_identifier?: number;
    [key: string]: any
}


export enum ExpirationIntent {
    customer_canceled = "1",
    billing_error = "2",
    customer_denied_price_increase = "3",
    product_not_available = "4",
    unknown = "5"
}

export interface PendingRenewalInfo {
    auto_renew_product_id?: string;
    auto_renew_status: "0" | "1";
    /**
     * The reason a subscription expired. This field is only present for a receipt that contains an expired auto-renewable subscription.
     */
    expiration_intent?: ExpirationIntent;
    grace_period_expires_date?: string;
    grace_period_expires_date_ms?: string;
    grace_period_expires_date_pst?: string;
    is_in_billing_retry_period?: "0" | "1";
    original_transaction_id?: string;
    price_consent_status?: "0" | "1";
    product_id?: string;
}

/**
 * see [Apple Docs](https://developer.apple.com/documentation/appstorereceipts/responsebody)
 */
export interface AppleReceiptResponseRawBody {
    environment: "Sandbox" | "Production";
    "is-retryable": boolean;
    /**
     * Base64 encoded string
     */
    latest_receipt: string; //base 64 encoded string
    /**
     * An array that contains all in-app purchase transactions.
     * This excludes transactions for consumable products that have been marked as finished by your app.
     * Only returned for receipts that contain auto-renewable subscriptions.
     */
    latest_receipt_info: AppleTransactionInfo[];

    /**
     * In the JSON file, an array where each element contains the pending renewal
     * information for each auto-renewable subscription identified by the product_id.
     * Only returned for app receipts that contain auto-renewable subscriptions.
     */
    pending_renewal_info: PendingRenewalInfo[];

    /**
     * A JSON representation of the receipt that was sent for verification.
     */
    receipt: AppleReceipt;

    /**
     * Either 0 if the receipt is valid, or a status code if there is an error.
     * The status code reflects the status of the app receipt as a whole.
     * See status for possible status codes and descriptions.
     */
    status: ReceiptStatusCode;
}

export enum ReceiptStatusCode {
    valid = 0,
    receipt_is_test_environment = 21007,
    internal_error = 21009,
    invalid_http_verb = 21000,
    deprecated_status_code = 21001,
    malformed_data = 21002,
    not_authorized = 21003,
    shared_secret_invalid = 21004,
    server_not_availalbe = 21005,
    subscription_expired = 21006,
    receipt_is_prod_environment = 21008,
    user_account_not_found_or_deleted = 21010,
}

export const AppleReceiptCode = {
    21000: "The request to the App Store was not made using the HTTP POST request method.",
    21001: "This status code is no longer sent by the App Store.",
    21002: "The data in the receipt-data property was malformed or missing.",
    21003: "The receipt could not be authenticated.",
    21004: "The shared secret you provided does not match the shared secret on file for your account.",
    21005: "The receipt server is not currently available.",
    21006: "This receipt is valid but the subscription has expired. When this status code is returned to your server, the receipt data is also decoded and returned as part of the response. Only returned for iOS 6-style transaction receipts for auto-renewable subscriptions.",
    21007: "This receipt is from the test environment, but it was sent to the production environment for verification.",
    21008: "This receipt is from the production environment, but it was sent to the test environment for verification.",
    21009: "Internal data access error. Try again later.",
    21010: "The user account cannot be found or has been deleted."
};